/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

var express = require("express");
var app = express();

try {
  var mongoose = require("mongoose");
} catch (e) {
  console.log(e);
}

var fs = require("fs");
var path = require("path");
var bodyParser = require("body-parser");
var router = express.Router();

var enableCORS = function(req, res, next) {
  if (!process.env.DISABLE_XORIGIN) {
    var allowedOrigins = [
      "https://marsh-glazer.gomix.me",
      "https://narrow-plane.gomix.me",
      "https://www.freecodecamp.com"
    ];
    var origin = req.headers.origin;
    if (!process.env.XORIGIN_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(req.method);
      res.set({
        "Access-Control-Allow-Origin": origin,
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers":
          "Origin, X-Requested-With, Content-Type, Accept"
      });
    }
  }
  next();
};

// global setting for safety timeouts to handle possible
// wrong callbacks that will never be called
var timeout = 10000;

app.use(bodyParser.urlencoded({ extended: "false" }));
app.use(bodyParser.json());

app.get("/", function(req, res) {
  res.sendFile(path.join(__dirname, "/views/index.html"));
});

router.get("/file/*?", function(req, res, next) {
  if (req.params[0] === ".env") {
    return next({ status: 401, message: "ACCESS DENIED" });
  }
  fs.readFile(path.join(__dirname, req.params[0]), function(err, data) {
    if (err) {
      return next(err);
    }
    res.type("txt").send(data.toString());
  });
});

router.get("/is-mongoose-ok", function(req, res) {
  if (mongoose) {
    res.json({ isMongooseOk: !! mongoose.connection.readyState });
  } else {
    res.json({ isMongooseOk: false });
  }
});

var Person = require("./app.js").personModel;

router.use(function(req, res, next) {
  if (req.method !== "OPTIONS" && Person.modelName !== "Person") {
    return next({ message: "Person Model is not correct" });
  }
  next();
});

router.post("/mongoose-model", function(req, res, next) {
  // try to create a new instance based on their model
  // verify it's correctly defined in some way
  var p;
 
  p = new Person(req.body);
  
  res.json(p);
});

var createPerson = require('./app.js').createAndSavePerson;
var data = { 
  name: 'Philip', 
  age: 23, 
  favoriteFoods: ['Jelly', 'Peanuts', 'Sausages']
}
router.get('/create-and-save-person', function(req, res, next) {
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  
  createPerson(data, function(err, data){
    clearTimeout(t);
    if(err) { return ( next(err) ) };
    if(!data){
      console.log('Missing `done()` statement');
      return next({message: 'Missing Callback Argument'});
    }
    
    Person.findById(data._id, function(err, person){
      if(err) { return ( next(err) ) } 
      res.json(person);
      person.remove();
    });
  });
});
     
var createPeople = require('./app.js').createManyPeople;

router.post('/create-many-people', function(req, res, next) {

  Person.remove({}, function(err){
    if(err) { return ( next(err) ) }
    var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
    
    createPeople(req.body, function(err, data){
      clearTimeout(t);
      
      if(err) { return ( next(err) ) };
      if(!data){
        console.log('Missing `done()` statement');
        return next({message: 'Missing Callback Argument'});
      }
      
      Person.find({}, function(err, people){
        if(err) { return ( next(err) ) } 
        res.json(people);
        Person.deleteMany(function(err, result){
          if(err) console.log(err);
          else console.log('Count: ', result.deletedCount);          
        });
      });
    });
  });
});

var findPeopleByName = require('./app.js').findPeopleByName;

router.post('/find-all-by-name', function(req, res, next) {
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  Person.create(req.body, function(err, person){
    
    if(err) { return next(err) }
  
    findPeopleByName(person.name, function(err, data){
      clearTimeout(t);
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({message: 'Missing Callback Argument'});
      }
      res.json(data);
      person.remove();
    });
  })
});

var findOneByFood = require('./app.js').findOneByFood;

router.post('/find-one-by-food', function(req, res, next) {
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  Person.create(req.body, function(err, person){
    if(err) { return next(err) }
    findOneByFood(person.favoriteFoods[0], function(err, data){
      clearTimeout(t);
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({message: 'Missing Callback Argument'});
      }
      res.json(data);
      person.remove();
    });
  });
});

var createAndSavePerson = require('./app.js').createAndSavePerson;
var findPersonById = require('./app.js').findPersonById;

router.get('/find-by-id', function(req, res, next) {
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  createAndSavePerson({ name: 'test', age: 0, favoriteFoods: ['none'] }, function(err, person){
    
    if(err) { return next(err) }
    findPersonById(person._id, function(err, data){
      clearTimeout(t);
      
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({ message: 'Missing Callback Argument' });
      }
      res.json(data);
      person.remove();
    });
  });
});

var findEditThenSave = require('./app.js').findEditThenSave;

router.post('/find-edit-save', function(req, res, next){
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  createAndSavePerson(req.body, function(err, person){
    if(err) { return next(err) }
    
    findEditThenSave(person._id, function(err, result){
      clearTimeout(t);      
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({ message: 'Missing Callback Argument' });
      }
      res.json(result);
      person.remove();
    });
  });
});

var findAndUpdate = require('./app.js').findAndUpdate;

router.post('/find-one-update', function(req, res, next){
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  createAndSavePerson(req.body, function(err, person){
    if(err) { return next(err) }
    
    findAndUpdate(person.name, function(err, result){
      clearTimeout(t);      
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({ message: 'Missing Callback Argument' });
      }
      res.json(result);
      person.remove();
    });
  });
});

var removeById = require('./app.js').removeById;

router.post('/remove-one-person', function(req, res, next){
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  createAndSavePerson(req.body, function(err, person){
    if(err) { return next(err) }
    
    removeById(person._id, function(err, data){
      clearTimeout(t);     
     
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({ message: 'Missing Callback Argument' });
      }
      Person.countDocuments(function(err, count){
        if(err) { next(err) }
        data = data.toObject();
        data.count = count;
        console.log(data);
        res.json(data);
      });
    });
  });
});

var removeManyPeople= require('./app.js').removeManyPeople;

router.post('/remove-many-people', function(req, res, next){
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  createAndSavePerson(req.body, function(err, person){
    if(err) { return next(err) }
    let len = Object.keys(req.body).length;
    //console.log(len);
    removeManyPeople(len, function(err, result){
      clearTimeout(t);     
     
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({ message: 'Missing Callback Argument' });
      }
      Person.countDocuments(function(err, count){
      
        if(err) { next(err) }
        let json = {
          n: result.n,
          count: count,
          ok: result.ok
        }
        res.json(json);
      });
    });
  });
});

var queryChain= require('./app.js').queryChain;

router.post('/query-tools', function(req, res, next){
  var t = setTimeout(() => { next({ message: 'timeout'}) }, timeout);
  createAndSavePerson(req.body, function(err, person){
   
    if(err) { return next(err) }
  
    queryChain(function(err, data){
      clearTimeout(t);  
     
      console.log("Error: ", err, "Data: ", data);
      if(err) { return next(err) }      
      if(!data){
        console.log('Missing `done()` statement');
        return next({ message: 'Missing Callback Argument' });
      }
      res.json(data);
      Person.remove();
    });
  });
});

app.use("/_api", enableCORS, router);

// Error handler
app.use(function(err, req, res, next) {
  if (err) {
    res
      .status(err.status || 500)
      .type("txt")
      .send(err.message || "SERVER ERROR");
  }
});

// Unmatched routes handler
app.use(function(req, res) {
  if (req.method.toLowerCase() === "options") {
    res.end();
  } else {
    res
      .status(404)
      .type("txt")
      .send("Not Found");
  }
});

const server = app.listen(process.env.PORT || 3001, "127.0.0.1", () => {
  console.log(
    "Express Server Listening on Localhost@Port " + server.address().port
  );
});

/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/
